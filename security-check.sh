#!/bin/bash

# Script de Verifica√ß√£o de Seguran√ßa para Produ√ß√£o
# Sistema RAG Multi-Agente

set -e

# Cores
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}üîí Verifica√ß√£o de Seguran√ßa - Sistema RAG Multi-Agente${NC}"
echo "=================================================="

# Contadores
PASSED=0
FAILED=0
WARNINGS=0

# Fun√ß√£o para check
check() {
    local test_name="$1"
    local command="$2"
    local expected="$3"
    
    echo -n "üîç $test_name... "
    
    if eval "$command" > /dev/null 2>&1; then
        if [[ "$expected" == "fail" ]]; then
            echo -e "${RED}FALHOU${NC}"
            ((FAILED++))
        else
            echo -e "${GREEN}OK${NC}"
            ((PASSED++))
        fi
    else
        if [[ "$expected" == "fail" ]]; then
            echo -e "${GREEN}OK${NC}"
            ((PASSED++))
        else
            echo -e "${RED}FALHOU${NC}"
            ((FAILED++))
        fi
    fi
}

# Fun√ß√£o para warning
warning() {
    local message="$1"
    echo -e "${YELLOW}‚ö†Ô∏è AVISO: $message${NC}"
    ((WARNINGS++))
}

echo -e "${BLUE}1. Verifica√ß√µes de Configura√ß√£o${NC}"
echo "--------------------------------"

# Verificar se estamos em produ√ß√£o
if [[ "${ENVIRONMENT:-}" == "production" ]]; then
    echo -e "‚úÖ Ambiente: ${GREEN}PRODUCTION${NC}"
else
    warning "Ambiente n√£o est√° configurado como 'production'"
fi

# Verificar vari√°veis cr√≠ticas
echo -n "üîç API Bearer Token configurado... "
if [[ -n "$API_BEARER_TOKEN" && ${#API_BEARER_TOKEN} -ge 32 ]]; then
    echo -e "${GREEN}OK${NC}"
    ((PASSED++))
else
    echo -e "${RED}FALHOU${NC} (token muito curto ou ausente)"
    ((FAILED++))
fi

# Verificar debug desabilitado
echo -n "üîç Debug mode desabilitado... "
if [[ "${DEBUG:-}" == "false" ]]; then
    echo -e "${GREEN}OK${NC}"
    ((PASSED++))
else
    echo -e "${RED}FALHOU${NC} (DEBUG deve ser false)"
    ((FAILED++))
fi

# Verificar CORS
echo -n "üîç CORS restritivo... "
if [[ "${ENABLE_CORS:-}" == "false" ]]; then
    echo -e "${GREEN}OK${NC}"
    ((PASSED++))
else
    warning "CORS est√° habilitado - verifique se √© necess√°rio"
fi

echo ""
echo -e "${BLUE}2. Verifica√ß√µes de Rede${NC}"
echo "------------------------"

# Testar autentica√ß√£o inv√°lida
echo -n "üîç Autentica√ß√£o rejeitando tokens inv√°lidos... "
if curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer invalid-token" http://localhost:8000/health | grep -q "401"; then
    echo -e "${GREEN}OK${NC}"
    ((PASSED++))
else
    echo -e "${RED}FALHOU${NC} (n√£o rejeitou token inv√°lido)"
    ((FAILED++))
fi

# Testar sem autentica√ß√£o
echo -n "üîç Endpoints protegidos requerem auth... "
if curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/search | grep -q "401\|403"; then
    echo -e "${GREEN}OK${NC}"
    ((PASSED++))
else
    echo -e "${RED}FALHOU${NC} (endpoint n√£o protegido)"
    ((FAILED++))
fi

# Verificar headers de seguran√ßa
echo -n "üîç Headers de seguran√ßa presentes... "
if curl -s -I http://localhost/health | grep -q "X-Frame-Options\|X-Content-Type-Options"; then
    echo -e "${GREEN}OK${NC}"
    ((PASSED++))
else
    warning "Headers de seguran√ßa n√£o encontrados (configure no Nginx)"
fi

echo ""
echo -e "${BLUE}3. Verifica√ß√µes de Container${NC}"
echo "-------------------------------"

# Verificar se containers est√£o rodando como n√£o-root
echo -n "üîç Containers rodando como n√£o-root... "
if docker-compose exec -T api-simple whoami | grep -q "appuser"; then
    echo -e "${GREEN}OK${NC}"
    ((PASSED++))
else
    echo -e "${RED}FALHOU${NC} (container rodando como root)"
    ((FAILED++))
fi

# Verificar resource limits
echo -n "üîç Resource limits configurados... "
if docker-compose config | grep -q "limits"; then
    echo -e "${GREEN}OK${NC}"
    ((PASSED++))
else
    warning "Resource limits n√£o configurados"
fi

echo ""
echo -e "${BLUE}4. Verifica√ß√µes de Logs${NC}"
echo "-------------------------"

# Verificar se logs n√£o cont√™m secrets
echo -n "üîç Logs n√£o cont√™m secrets... "
if ! grep -r "sk-" logs/ 2>/dev/null | grep -v "MASKED"; then
    echo -e "${GREEN}OK${NC}"
    ((PASSED++))
else
    echo -e "${RED}FALHOU${NC} (poss√≠vel vazamento de API key nos logs)"
    ((FAILED++))
fi

# Verificar permiss√µes de diret√≥rios
echo -n "üîç Permiss√µes de diret√≥rios seguras... "
if [[ $(stat -c %a logs/) == "755" || $(stat -c %a logs/) == "750" ]]; then
    echo -e "${GREEN}OK${NC}"
    ((PASSED++))
else
    warning "Permiss√µes do diret√≥rio de logs podem estar muito abertas"
fi

echo ""
echo "=================================================="
echo -e "${BLUE}üìä Resumo da Verifica√ß√£o de Seguran√ßa${NC}"
echo "=================================================="
echo -e "‚úÖ Testes Passou: ${GREEN}$PASSED${NC}"
echo -e "‚ùå Testes Falhou: ${RED}$FAILED${NC}"
echo -e "‚ö†Ô∏è Avisos: ${YELLOW}$WARNINGS${NC}"
echo ""

if [[ $FAILED -eq 0 ]]; then
    echo -e "${GREEN}üéâ Sistema passou em todas as verifica√ß√µes cr√≠ticas de seguran√ßa!${NC}"
    exit 0
else
    echo -e "${RED}üö® Sistema falhou em $FAILED verifica√ß√µes cr√≠ticas!${NC}"
    echo -e "${YELLOW}Por favor, corrija os problemas antes de ir para produ√ß√£o.${NC}"
    exit 1
fi