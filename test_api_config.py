#!/usr/bin/env python3
"""
üß™ TESTE DE CONFIGURA√á√ÉO DAS APIs
Verifica se todas as configura√ß√µes est√£o corretas para execu√ß√£o das APIs
"""

import os
import sys
from pathlib import Path
from dotenv import load_dotenv

def test_api_configuration():
    """Testa configura√ß√£o das APIs"""
    print("üß™ TESTE DE CONFIGURA√á√ÉO DAS APIs")
    print("=" * 60)
    
    # 1. Carregar vari√°veis de ambiente
    print("\nüìã 1. CARREGANDO CONFIGURA√á√ïES")
    load_dotenv()
    
    # 2. Verificar vari√°veis obrigat√≥rias
    print("\nüîë 2. VERIFICANDO VARI√ÅVEIS OBRIGAT√ìRIAS")
    required_vars = [
        "OPENAI_API_KEY",
        "VOYAGE_API_KEY", 
        "ASTRA_DB_API_ENDPOINT",
        "ASTRA_DB_APPLICATION_TOKEN"
    ]
    
    missing_vars = []
    for var in required_vars:
        value = os.getenv(var)
        if not value:
            missing_vars.append(var)
            print(f"‚ùå {var}: AUSENTE")
        elif value in ["your-key-here", "sk-...", "pa-...", "AstraCS:..."]:
            missing_vars.append(var)
            print(f"‚ö†Ô∏è  {var}: VALOR PLACEHOLDER")
        else:
            print(f"‚úÖ {var}: CONFIGURADO")
    
    if missing_vars:
        print(f"\n‚ùå Vari√°veis faltando: {', '.join(missing_vars)}")
        print("üí° Configure essas vari√°veis no arquivo .env")
        return False
    
    # 3. Testar importa√ß√µes do sistema
    print("\nüì¶ 3. TESTANDO IMPORTA√á√ïES DO SISTEMA")
    try:
        from config import SystemConfig
        print("‚úÖ config.py importado")
        
        system_config = SystemConfig()
        print("‚úÖ SystemConfig instanciado")
        
        validation = system_config.validate_all()
        if validation["rag_valid"] and validation["multiagent_valid"]:
            print("‚úÖ Configura√ß√£o v√°lida")
        else:
            print("‚ö†Ô∏è  Configura√ß√£o parcialmente v√°lida")
            print(f"   RAG: {'‚úÖ' if validation['rag_valid'] else '‚ùå'}")
            print(f"   Multi-Agente: {'‚úÖ' if validation['multiagent_valid'] else '‚ùå'}")
        
    except Exception as e:
        print(f"‚ùå Erro na importa√ß√£o: {e}")
        return False
    
    # 4. Verificar configura√ß√µes das APIs
    print("\nüîß 4. VERIFICANDO CONFIGURA√á√ïES DAS APIs")
    
    api_configs = {
        "API_HOST": os.getenv("API_HOST", "0.0.0.0"),
        "API_PORT_SIMPLE": os.getenv("API_PORT_SIMPLE", "8000"),
        "API_PORT_MULTIAGENT": os.getenv("API_PORT_MULTIAGENT", "8001"),
        "API_LOG_LEVEL": os.getenv("API_LOG_LEVEL", "info"),
        "API_WORKERS": os.getenv("API_WORKERS", "1")
    }
    
    for key, value in api_configs.items():
        print(f"‚úÖ {key}: {value}")
    
    # 5. Verificar depend√™ncias opcionais
    print("\nüì¶ 5. VERIFICANDO DEPEND√äNCIAS OPCIONAIS")
    
    optional_packages = {
        "fastapi": "FastAPI framework",
        "uvicorn": "ASGI server", 
        "redis": "Cache Redis",
        "websockets": "WebSocket support"
    }
    
    for package, description in optional_packages.items():
        try:
            __import__(package)
            print(f"‚úÖ {package}: {description}")
        except ImportError:
            print(f"‚ö†Ô∏è  {package}: {description} (n√£o instalado)")
    
    # 6. Verificar diret√≥rios
    print("\nüìÅ 6. VERIFICANDO DIRET√ìRIOS")
    
    directories = [
        os.getenv("LOG_DIR", "logs"),
        os.getenv("TEMP_DIR", "temp"),
        os.getenv("IMAGE_DIR", "pdf_images")
    ]
    
    for directory in directories:
        path = Path(directory)
        if path.exists():
            print(f"‚úÖ {directory}: existe")
        else:
            try:
                path.mkdir(parents=True, exist_ok=True)
                print(f"‚úÖ {directory}: criado")
            except Exception as e:
                print(f"‚ùå {directory}: erro ao criar - {e}")
    
    # 7. Testar conectividade b√°sica
    print("\nüåê 7. TESTANDO CONECTIVIDADE B√ÅSICA")
    
    try:
        import requests
        # Teste b√°sico de conectividade com timeout
        response = requests.get("https://api.openai.com", timeout=5)
        print("‚úÖ Conectividade com OpenAI: OK")
    except Exception as e:
        print(f"‚ö†Ô∏è  Conectividade com OpenAI: {e}")
    
    try:
        response = requests.get("https://api.voyageai.com", timeout=5)
        print("‚úÖ Conectividade com Voyage AI: OK")
    except Exception as e:
        print(f"‚ö†Ô∏è  Conectividade com Voyage AI: {e}")
    
    # 8. Resumo final
    print("\nüéØ 8. RESUMO DA CONFIGURA√á√ÉO")
    print("=" * 60)
    
    if not missing_vars:
        print("‚úÖ CONFIGURA√á√ÉO COMPLETA!")
        print("üöÄ As APIs est√£o prontas para execu√ß√£o")
        print("\nüí° PR√ìXIMOS PASSOS:")
        print("   1. Instalar depend√™ncias: pip install -r requirements_api.txt")
        print("   2. Executar API Simples: python api_simple.py")
        print("   3. Executar API Multi-Agente: python api_multiagent.py")
        print("   4. Ou usar Docker: docker-compose up -d")
        return True
    else:
        print("‚ö†Ô∏è  CONFIGURA√á√ÉO INCOMPLETA")
        print(f"‚ùå Configure estas vari√°veis: {', '.join(missing_vars)}")
        return False

def test_api_startup_simulation():
    """Simula inicializa√ß√£o das APIs"""
    print("\nüöÄ SIMULA√á√ÉO DE INICIALIZA√á√ÉO DAS APIs")
    print("-" * 40)
    
    try:
        # Testar importa√ß√µes cr√≠ticas
        from config import SystemConfig
        system_config = SystemConfig()
        
        print(f"‚úÖ Modelo RAG: {system_config.rag.llm_model}")
        print(f"‚úÖ Modelo Multi-Agente: {system_config.multiagent.model}")
        print(f"‚úÖ Collection: {system_config.rag.collection_name}")
        print(f"‚úÖ Max Candidatos: {system_config.rag.max_candidates}")
        print(f"‚úÖ Timeout: {system_config.multiagent.subagent_timeout}s")
        
        print("\nüéØ APIs prontas para inicializa√ß√£o!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na simula√ß√£o: {e}")
        return False

if __name__ == "__main__":
    success = test_api_configuration()
    
    if success:
        test_api_startup_simulation()
        print("\nüéâ TESTE CONCLU√çDO COM SUCESSO!")
        sys.exit(0)
    else:
        print("\nüí• TESTE FALHOU - CONFIGURE AS VARI√ÅVEIS AUSENTES")
        sys.exit(1)