[project]
name = "rag-multiagent-system"
version = "1.0.0"
description = "Sistema RAG Multi-Agente com reasoning avançado e especialização"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Sistema RAG Multi-Agente", email = "contact@example.com"}
]
license = {text = "MIT"}
keywords = ["rag", "multiagent", "ai", "machine-learning", "nlp"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research", 
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

# Dependências principais do sistema
dependencies = [
    # === CORE SISTEMA RAG ===
    "openai>=1.88.0",
    "voyageai>=0.3.2", 
    "astrapy>=2.0.1",
    "pymupdf>=1.26.1",
    "pymupdf4llm>=0.0.25",
    "pillow>=11.2.1",
    
    # === UTILITÁRIOS CORE ===
    "python-dotenv>=1.1.0",
    "requests>=2.32.4",
    "tqdm>=4.67.1",
    "typing-extensions>=4.14.0",
    
    # === SISTEMA MULTI-AGENTE ===
    "pydantic>=2.0.0",
    "aiohttp>=3.9.0",
    "jinja2>=3.1.0",
    "rich>=13.0.0",
    
    # === SERVIDOR ===
    "uvicorn>=0.34.3",
]

[project.optional-dependencies]
# Dependências para APIs de produção
api = [
    "fastapi>=0.104.1",
    "python-multipart>=0.0.6",
    "websockets>=12.0",
    "redis>=5.0.1",
    "structlog>=23.2.0",
]

# Dependências para desenvolvimento e testes
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.5",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.12.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
]

# Dependências para monitoramento
monitoring = [
    "opentelemetry-api>=1.20.0",
    "opentelemetry-sdk>=1.20.0",
    "prometheus-client>=0.19.0",
    "sentry-sdk[fastapi]>=1.38.0",
]

# Dependências completas (todas as opcionais)
all = [
    "rag-multiagent-system[api,dev,monitoring]"
]

[project.urls]
Homepage = "https://github.com/your-username/rag-multiagent-system"
Documentation = "https://github.com/your-username/rag-multiagent-system#readme"
Repository = "https://github.com/your-username/rag-multiagent-system.git"
Issues = "https://github.com/your-username/rag-multiagent-system/issues"

[project.scripts]
# Scripts de linha de comando
rag-index = "indexer:main"
rag-search = "search:main" 
rag-api-simple = "api_simple:main"
rag-api-multiagent = "api_multiagent:main"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["utils"]
include = [
    "*.py",
    "requirements*.txt",
    "*.md",
    "*.yml",
    "*.yaml",
    "*.toml",
    "*.conf",
    "Dockerfile*",
]
exclude = [
    "/.git",
    "/.venv", 
    "/venv",
    "/__pycache__",
    "*.pyc",
    "/.pytest_cache",
    "/logs",
    "/temp", 
    "/pdf_images",
    "*.log",
    ".env",
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
asyncio_mode = "auto"
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--verbose",
    "-ra",
    "--cov=./",
    "--cov-report=term-missing",
    "--cov-report=html",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "functional: Functional tests",
    "slow: Slow tests",
]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    "multi-agent-researcher/*",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError", 
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.black]
line-length = 100
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
  | multi-agent-researcher
)/
'''

[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "astrapy.*",
    "voyageai.*",
    "pymupdf.*",
    "pymupdf4llm.*",
]
ignore_missing_imports = true