#!/bin/bash

# Script de Deploy para Produ√ß√£o
# Sistema RAG Multi-Agente

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configura√ß√µes
DOCKER_COMPOSE_FILE="docker-compose.yml"
ENV_FILE=".env"
BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"

echo -e "${BLUE}üöÄ Iniciando deploy para produ√ß√£o...${NC}"

# Fun√ß√£o para log
log() {
    echo -e "${GREEN}[$(date '+%Y-%m-%d %H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[$(date '+%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

warning() {
    echo -e "${YELLOW}[$(date '+%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

# Verificar se estamos em produ√ß√£o
if [[ "${ENVIRONMENT:-}" != "production" ]]; then
    error "Este script deve ser executado apenas em ambiente de produ√ß√£o!"
fi

# Verificar depend√™ncias
command -v docker >/dev/null 2>&1 || error "Docker n√£o est√° instalado"
command -v docker-compose >/dev/null 2>&1 || error "Docker Compose n√£o est√° instalado"

# Verificar arquivos essenciais
[[ -f "$DOCKER_COMPOSE_FILE" ]] || error "Arquivo $DOCKER_COMPOSE_FILE n√£o encontrado"
[[ -f "$ENV_FILE" ]] || error "Arquivo $ENV_FILE n√£o encontrado"

# Verificar vari√°veis de ambiente cr√≠ticas
log "Verificando configura√ß√£o..."
if ! grep -q "API_BEARER_TOKEN=" "$ENV_FILE"; then
    error "API_BEARER_TOKEN n√£o configurado no $ENV_FILE"
fi

if ! grep -q "OPENAI_API_KEY=" "$ENV_FILE"; then
    error "OPENAI_API_KEY n√£o configurado no $ENV_FILE"
fi

if ! grep -q "VOYAGE_API_KEY=" "$ENV_FILE"; then
    error "VOYAGE_API_KEY n√£o configurado no $ENV_FILE"
fi

# Criar backup
log "Criando backup..."
mkdir -p "$BACKUP_DIR"
if docker-compose -f "$DOCKER_COMPOSE_FILE" ps | grep -q "Up"; then
    docker-compose -f "$DOCKER_COMPOSE_FILE" exec -T redis redis-cli BGSAVE || warning "Backup do Redis falhou"
fi

# Parar servi√ßos existentes
log "Parando servi√ßos existentes..."
docker-compose -f "$DOCKER_COMPOSE_FILE" down || warning "Alguns servi√ßos j√° estavam parados"

# Limpar imagens antigas
log "Limpando imagens antigas..."
docker system prune -f

# Build das novas imagens
log "Construindo imagens..."
docker-compose -f "$DOCKER_COMPOSE_FILE" build --no-cache

# Iniciar servi√ßos
log "Iniciando servi√ßos..."
docker-compose -f "$DOCKER_COMPOSE_FILE" up -d

# Aguardar health checks
log "Aguardando health checks..."
sleep 30

# Verificar status dos servi√ßos
log "Verificando status dos servi√ßos..."

# Verificar API Simple
if curl -f -s "http://localhost:8000/health" > /dev/null; then
    log "‚úÖ API Simple est√° funcionando"
else
    error "‚ùå API Simple n√£o est√° respondendo"
fi

# Verificar API Multi-Agent
if curl -f -s "http://localhost:8001/health" > /dev/null; then
    log "‚úÖ API Multi-Agent est√° funcionando"
else
    error "‚ùå API Multi-Agent n√£o est√° respondendo"
fi

# Verificar Redis
if docker-compose -f "$DOCKER_COMPOSE_FILE" exec -T redis redis-cli ping | grep -q "PONG"; then
    log "‚úÖ Redis est√° funcionando"
else
    warning "‚ö†Ô∏è Redis n√£o est√° respondendo"
fi

# Mostrar status final
log "Status final dos servi√ßos:"
docker-compose -f "$DOCKER_COMPOSE_FILE" ps

# Logs recentes
log "Logs recentes:"
docker-compose -f "$DOCKER_COMPOSE_FILE" logs --tail=10

echo -e "${GREEN}üéâ Deploy conclu√≠do com sucesso!${NC}"
echo -e "${BLUE}üìä URLs dos servi√ßos:${NC}"
echo -e "  API Simple: http://localhost:8000"
echo -e "  API Multi-Agent: http://localhost:8001"
echo -e "  Health Checks: http://localhost:8000/health | http://localhost:8001/health"
echo -e "${BLUE}üìù Para ver logs: docker-compose -f $DOCKER_COMPOSE_FILE logs -f${NC}"