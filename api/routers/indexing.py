#!/usr/bin/env python3
"""
üìÑ Router de Indexa√ß√£o - API Multi-Agente

Endpoints relacionados √† indexa√ß√£o de documentos PDF.
"""

import asyncio
import logging
from datetime import datetime

from fastapi import APIRouter, Depends, HTTPException

from ..models.schemas import IndexRequest, IndexResponse
from ..core.state import APIStateManager
from ..dependencies import (
    get_authenticated_state,
    track_request_metrics
)
from ..utils.errors import ErrorHandler, ValidationError, ProcessingError, ServiceUnavailableError

logger = logging.getLogger(__name__)

router = APIRouter(
    prefix="/index",
    tags=["Indexa√ß√£o"],
    responses={
        401: {"description": "Token de acesso inv√°lido"},
        503: {"description": "Servi√ßo indispon√≠vel"},
        422: {"description": "Dados de entrada inv√°lidos"}
    }
)

# Verificar disponibilidade do indexer
try:
    import sys
    import os
    from pathlib import Path
    
    # Adicionar path do workspace (no in√≠cio da lista para prioridade)
    workspace_root = Path("/workspaces/rag")
    workspace_path = str(workspace_root)
    if workspace_path not in sys.path:
        sys.path.insert(0, workspace_path)
    
    # Alterar diret√≥rio temporariamente para resolver imports relativos
    original_cwd = os.getcwd()
    os.chdir(workspace_root)
    
    from src.core.indexer import index_pdf_native, create_doc_source_name, IndexingResult
    INDEXER_AVAILABLE = True
    logger.info("‚úÖ Indexer dispon√≠vel")
    
    # Voltar ao diret√≥rio original
    os.chdir(original_cwd)
    
except ImportError as e:
    logger.warning(f"‚ö†Ô∏è Indexer n√£o dispon√≠vel: {e}")
    INDEXER_AVAILABLE = False
    
    # Fun√ß√µes de fallback
    def index_pdf_native(url: str, doc_source: str = None):
        return None
    
    def create_doc_source_name(url: str) -> str:
        return url.split("/")[-1]


@router.post("", response_model=IndexResponse, summary="Indexar Documento PDF")
async def index_document(
    request: IndexRequest,
    state_manager: APIStateManager = Depends(get_authenticated_state),
    request_context = Depends(track_request_metrics)
):
    """
    Indexa um documento PDF por URL no sistema RAG.
    
    **Par√¢metros:**
    - **url**: URL v√°lida do arquivo PDF (deve come√ßar com http/https e terminar com .pdf)
    - **doc_source**: Nome identificador do documento (opcional, ser√° gerado se n√£o fornecido)
    
    **Processo de Indexa√ß√£o:**
    1. Download do PDF da URL fornecida
    2. Extra√ß√£o de texto e imagens
    3. Cria√ß√£o de chunks sem√¢nticos
    4. Gera√ß√£o de embeddings
    5. Armazenamento no banco vetorial
    
    **Retorna:**
    - Status da indexa√ß√£o
    - Estat√≠sticas do processamento
    - Metadados do documento
    
    **Exemplo de uso:**
    ```json
    {
        "url": "https://arxiv.org/pdf/2301.00001.pdf",
        "doc_source": "paper-transformers-2023"
    }
    ```
    """
    if not INDEXER_AVAILABLE:
        raise ServiceUnavailableError("Indexer", "Sistema de indexa√ß√£o n√£o dispon√≠vel")
    
    try:
        logger.info(f"üìÑ Iniciando indexa√ß√£o: {request.url}")
        
        # Valida√ß√£o adicional da URL
        ErrorHandler.validate_url(request.url)
        
        # Criar nome do documento se n√£o fornecido
        doc_source = request.doc_source or create_doc_source_name(request.url)
        
        # Verificar se doc_source √© v√°lido
        if not doc_source or not doc_source.strip():
            doc_source = f"document_{datetime.utcnow().strftime('%Y%m%d_%H%M%S')}"
        
        logger.info(f"üìã Documento ser√° indexado como: {doc_source}")
        
        # Executar indexa√ß√£o em thread separada para n√£o bloquear
        logger.info("üîÑ Executando indexa√ß√£o...")
        indexing_result = await asyncio.to_thread(index_pdf_native, request.url, doc_source)
        
        if indexing_result and indexing_result.success:
            response = IndexResponse(
                success=True,
                message="Documento indexado com sucesso usando indexer",
                doc_source=indexing_result.doc_source,
                pages_processed=indexing_result.pages_processed,
                chunks_created=indexing_result.chunks_created,
                images_extracted=indexing_result.images_extracted,
                processing_time=indexing_result.processing_time,
                metadata=indexing_result.metadata or {}
            )
            
            logger.info(
                f"‚úÖ Indexa√ß√£o conclu√≠da: {doc_source} - "
                f"{indexing_result.pages_processed} p√°ginas, "
                f"{indexing_result.chunks_created} chunks em "
                f"{indexing_result.processing_time:.2f}s"
            )
            
            return response
            
        else:
            error_detail = indexing_result.error if indexing_result else "Erro desconhecido na indexa√ß√£o"
            logger.error(f"‚ùå Falha na indexa√ß√£o: {error_detail}")
            raise ProcessingError("indexa√ß√£o", error_detail)
            
    except ValidationError:
        # Erro de valida√ß√£o - re-raise
        raise
        
    except Exception as e:
        logger.error(f"‚ùå Erro na indexa√ß√£o: {e}", exc_info=True)
        raise ProcessingError("indexa√ß√£o", str(e))


@router.get("/status", summary="Status do Sistema de Indexa√ß√£o")
async def indexing_status():
    """
    Retorna o status do sistema de indexa√ß√£o.
    
    **Retorna:**
    - Disponibilidade do indexer
    - Vers√£o do sistema
    - Capacidades dispon√≠veis
    """
    return {
        "indexer_available": INDEXER_AVAILABLE,
        "indexer_version": "1.0" if INDEXER_AVAILABLE else None,
        "capabilities": {
            "pdf_processing": INDEXER_AVAILABLE,
            "image_extraction": INDEXER_AVAILABLE,
            "semantic_chunking": INDEXER_AVAILABLE,
            "vector_storage": INDEXER_AVAILABLE
        } if INDEXER_AVAILABLE else {},
        "supported_formats": ["PDF"] if INDEXER_AVAILABLE else [],
        "timestamp": datetime.utcnow().isoformat()
    }


@router.post("/validate-url", summary="Validar URL de Documento")
async def validate_document_url(request: IndexRequest):
    """
    Valida uma URL de documento sem realizar a indexa√ß√£o.
    
    **Par√¢metros:**
    - **url**: URL para validar
    
    **Retorna:**
    - Status da valida√ß√£o
    - Informa√ß√µes sobre a URL
    """
    try:
        # Validar URL
        ErrorHandler.validate_url(request.url)
        
        # Gerar nome do documento
        doc_source = request.doc_source or create_doc_source_name(request.url)
        
        return {
            "valid": True,
            "url": request.url,
            "generated_doc_source": doc_source,
            "ready_for_indexing": INDEXER_AVAILABLE,
            "message": "URL v√°lida e pronta para indexa√ß√£o" if INDEXER_AVAILABLE else "URL v√°lida, mas indexer n√£o dispon√≠vel"
        }
        
    except ValidationError as e:
        return {
            "valid": False,
            "url": request.url,
            "error": e.user_message,
            "details": e.details
        }
